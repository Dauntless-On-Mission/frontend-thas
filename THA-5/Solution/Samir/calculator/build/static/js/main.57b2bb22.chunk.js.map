{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","screenValue","setscreenValue","resetValue","setresetValue","buttonClicked","e","operator","pressed","target","value","includes","length","slice","tempScreenvalue","presentOperator","op","indexOf","gotOperator","eval","index","className","type","disabled","map","num","onClick"],"mappings":"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","file":"static/js/main.57b2bb22.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  let [screenValue, setscreenValue] = useState(\"0\");\n  let [resetValue, setresetValue] = useState(false);\n\n  const buttonClicked = (e) => {\n    const operator = [\"%\", \"/\", \"*\", \"-\", \"+\"];\n    const pressed = e.target.value;\n    if (resetValue) {\n      if (!operator.includes(pressed)) {\n        screenValue = \"0\";\n      }\n      setresetValue(false);\n    }\n\n    if (screenValue === \"Infinity\" || screenValue === \"NaN\") {\n      if (operator.includes(pressed)) {\n        setscreenValue(\"0\" + pressed);\n      } else {\n        setscreenValue(pressed);\n      }\n    } else if (pressed === \"C\") {\n      setscreenValue(\"0\");\n    } else if (pressed === \"D\") {\n      screenValue.length <= 1\n        ? setscreenValue(\"0\")\n        : setscreenValue(screenValue.slice(0, screenValue.length - 1));\n    } else if (pressed === \".\") {\n      let tempScreenvalue = screenValue;\n      if (screenValue[0] === \"-\") {\n        tempScreenvalue = screenValue.slice(1, screenValue.length);\n      }\n      let presentOperator = \"\";\n      for (const op of operator) {\n        if (tempScreenvalue.includes(op)) {\n          presentOperator = op;\n          break;\n        }\n      }\n      if (presentOperator === \"\") {\n        if (!tempScreenvalue.includes(\".\")) {\n          setscreenValue(screenValue + pressed);\n        }\n      } else {\n        if (\n          !tempScreenvalue\n            .slice(\n              tempScreenvalue.indexOf(presentOperator) + 1,\n              tempScreenvalue.length\n            )\n            .includes(\".\")\n        ) {\n          if (tempScreenvalue[tempScreenvalue.length - 1] === presentOperator) {\n            setscreenValue(screenValue + \"0\" + pressed);\n          } else {\n            setscreenValue(screenValue + pressed);\n          }\n        }\n      }\n    } else if (operator.includes(pressed)) {\n      if (operator.includes(screenValue[screenValue.length - 1])) {\n        screenValue = screenValue.slice(0, screenValue.length - 1) + pressed;\n      } else {\n        let gotOperator = false;\n        let tempScreenvalue = screenValue;\n        if (screenValue[0] === \"-\") {\n          tempScreenvalue = screenValue.slice(1, screenValue.length);\n        }\n        for (const op of operator) {\n          if (tempScreenvalue.includes(op)) {\n            screenValue = eval(screenValue) + pressed;\n            gotOperator = true;\n            break;\n          }\n        }\n        if (!gotOperator) {\n          screenValue += pressed;\n        }\n      }\n      setscreenValue(screenValue);\n    } else if (pressed === \"=\") {\n      setresetValue(true);\n      setscreenValue(eval(screenValue) + \"\");\n    } else {\n      if (screenValue === \"0\") {\n        if (pressed === \"00\") {\n          screenValue = \"0\";\n        } else {\n          screenValue = pressed;\n        }\n      } else {\n        let presentOperator = \"\";\n        let tempScreenvalue = screenValue;\n        if (screenValue[0] === \"-\") {\n          tempScreenvalue = screenValue.slice(1, screenValue.length);\n        }\n        for (let op of operator) {\n          if (tempScreenvalue.includes(op)) {\n            presentOperator = op;\n            break;\n          }\n        }\n        if (presentOperator === \"\") {\n          screenValue += pressed;\n        } else {\n          const index = tempScreenvalue.indexOf(presentOperator);\n          if (index === tempScreenvalue.length - 1) {\n            if (pressed === \"00\") {\n              screenValue += \"0\";\n            } else {\n              screenValue += pressed;\n            }\n          } else if (index === tempScreenvalue.length - 2) {\n            if (tempScreenvalue[index + 1] === \"0\") {\n              if (pressed === \"0\" || pressed === \"00\") {\n              } else {\n                screenValue =\n                  screenValue.slice(0, screenValue.length - 1) + pressed;\n              }\n            } else {\n              screenValue += pressed;\n            }\n          } else {\n            screenValue += pressed;\n          }\n        }\n      }\n      setscreenValue(screenValue);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"screen\">\n        <input type=\"text\" disabled={true} value={screenValue} />\n      </div>\n      {[\"%\", \"C\", \"D\", \"/\", \"7\", \"8\", \"9\", \"*\", \"4\",\"5\",\"6\",\"-\",\"1\",\"2\",\"3\",\"+\",\"00\",\"0\",\".\",\"=\",].map((num) => {\n        return (\n          <button key={num} className=\"button disable-select\" value={num} onClick={buttonClicked} >\n            {num}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}